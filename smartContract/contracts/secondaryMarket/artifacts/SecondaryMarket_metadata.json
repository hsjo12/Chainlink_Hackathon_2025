{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "ERC1967InvalidImplementation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC1967NonPayable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EmptyArgs",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EmptySource",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EventEnded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientPayment",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidDuration",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidFeePercent",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPrice",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "InvalidTicketID",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ListingExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ListingNotActive",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ListingNotFound",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoInlineSecrets",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotSeller",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotTokenOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyRouterCanFulfill",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "TicketAlreadyUsed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "TicketNotFresh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenAlreadyListed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenNotApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UUPSUnauthorizedCallContext",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "slot",
						"type": "bytes32"
					}
				],
				"name": "UUPSUnsupportedProxiableUUID",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"name": "UnexpectedRequestID",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UnsupportedContract",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddress",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"name": "ContractSupportUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newFeeRecipient",
						"type": "address"
					}
				],
				"name": "FeeRecipientUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					}
				],
				"name": "ListingCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "ListingCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "ListingPurchased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "verified",
						"type": "bool"
					}
				],
				"name": "ListingVerified",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newFeePercent",
						"type": "uint256"
					}
				],
				"name": "PlatformFeeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "RequestFulfilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "RequestSent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "remainingTickets",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "rawResponse",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "error",
						"type": "bytes"
					}
				],
				"name": "Response",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "enum SecondaryMarket.TicketStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "TicketStatusUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"name": "TicketVerificationRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isUsed",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "rawResponse",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "error",
						"type": "bytes"
					}
				],
				"name": "TicketVerified",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "UPGRADE_INTERFACE_VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					}
				],
				"name": "cancelListing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "createListing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					}
				],
				"name": "emergencyCancelListing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentListingId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					}
				],
				"name": "getListing",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "listingId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "nftContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							},
							{
								"internalType": "string",
								"name": "ticketId",
								"type": "string"
							},
							{
								"internalType": "bool",
								"name": "pendingVerification",
								"type": "bool"
							}
						],
						"internalType": "struct SecondaryMarket.Listing",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					}
				],
				"name": "getListingTicketStatus",
				"outputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"internalType": "enum SecondaryMarket.TicketStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "response",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "err",
						"type": "bytes"
					}
				],
				"name": "handleOracleFulfillment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeRecipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_platformFeePercent",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_minListingDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxListingDuration",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "_subscriptionId",
						"type": "uint64"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "isTicketUsed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "isTokenListed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "listingToTicketId",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "listings",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "pendingVerification",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxListingDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minListingDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "platformFeePercent",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listingId",
						"type": "uint256"
					}
				],
				"name": "purchaseListing",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "remainingTickets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subscriptionId",
						"type": "uint64"
					},
					{
						"internalType": "string[]",
						"name": "args",
						"type": "string[]"
					}
				],
				"name": "requestRemainingTickets",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "requestToListing",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_lastCheckedTicketId",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_lastError",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_lastRequestId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_lastResponse",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_lastTicketUsed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newFeeRecipient",
						"type": "address"
					}
				],
				"name": "setFeeRecipient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newMinDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newMaxDuration",
						"type": "uint256"
					}
				],
				"name": "setListingDurationLimits",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newFeePercent",
						"type": "uint256"
					}
				],
				"name": "setPlatformFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "newSubscriptionId",
						"type": "uint64"
					}
				],
				"name": "setSubscriptionId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "nftContract",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"name": "setSupportedContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					},
					{
						"internalType": "enum SecondaryMarket.TicketStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "setTicketStatus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "subscriptionId",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "supportedContracts",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "ticketStatus",
				"outputs": [
					{
						"internalType": "enum SecondaryMarket.TicketStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "ticketUsageStatus",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokenToListing",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subscriptionId",
						"type": "uint64"
					},
					{
						"internalType": "string",
						"name": "ticketId",
						"type": "string"
					}
				],
				"name": "verifyTicketUsage",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Allows users to list, buy, and cancel NFT listings with ticket usage verification",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				],
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"ERC1967InvalidImplementation(address)": [
					{
						"details": "The `implementation` of the proxy is invalid."
					}
				],
				"ERC1967NonPayable()": [
					{
						"details": "An upgrade function sees `msg.value > 0` that may be lost."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"FailedCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"InvalidTicketID(string)": [
					{
						"details": "Custom error for invalid ticket ID"
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				],
				"UUPSUnauthorizedCallContext()": [
					{
						"details": "The call is from an unauthorized context."
					}
				],
				"UUPSUnsupportedProxiableUUID(bytes32)": [
					{
						"details": "The storage `slot` is unsupported as a UUID."
					}
				],
				"UnexpectedRequestID(bytes32)": [
					{
						"details": "Custom error for mismatched request fulfillment"
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				},
				"Upgraded(address)": {
					"details": "Emitted when the implementation is upgraded."
				}
			},
			"kind": "dev",
			"methods": {
				"cancelListing(uint256)": {
					"params": {
						"listingId": "ID of the listing to cancel"
					}
				},
				"createListing(address,uint256,uint256,uint256,string)": {
					"params": {
						"duration": "Listing duration in seconds",
						"nftContract": "Address of the NFT contract",
						"price": "Listing price in wei",
						"ticketId": "Ticket ID for verification",
						"tokenId": "Token ID to list"
					}
				},
				"emergencyCancelListing(uint256)": {
					"params": {
						"listingId": "ID of the listing to cancel"
					}
				},
				"getCurrentListingId()": {
					"returns": {
						"_0": "Current listing count"
					}
				},
				"getImplementation()": {
					"returns": {
						"_0": "The address of the current implementation contract."
					}
				},
				"getListing(uint256)": {
					"params": {
						"listingId": "ID of the listing"
					},
					"returns": {
						"_0": "Listing details"
					}
				},
				"getListingTicketStatus(uint256)": {
					"params": {
						"listingId": "ID of the listing"
					},
					"returns": {
						"status": "The current status of the ticket",
						"ticketId": "The ticket ID associated with the listing"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"handleOracleFulfillment(bytes32,bytes,bytes)": {
					"details": "Either response or error parameter will be set, but never both.",
					"params": {
						"err": "Aggregated error either from the request's source code or from the execution pipeline.",
						"requestId": "The requestId returned by FunctionsClient.sendRequest().",
						"response": "Aggregated response from the request's source code."
					}
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"initialize(address,uint256,uint256,uint256,address,uint64)": {
					"params": {
						"_feeRecipient": "Address to receive platform fees",
						"_maxListingDuration": "Maximum listing duration in seconds",
						"_minListingDuration": "Minimum listing duration in seconds",
						"_platformFeePercent": "Platform fee percentage in basis points",
						"_router": "Chainlink Functions router address",
						"_subscriptionId": "Chainlink Functions subscription ID"
					}
				},
				"isTicketUsed(string)": {
					"params": {
						"ticketId": "The ID of the ticket to check"
					},
					"returns": {
						"_0": "isUsed Whether the ticket has been used"
					}
				},
				"isTokenListed(address,uint256)": {
					"params": {
						"nftContract": "Address of the NFT contract",
						"tokenId": "Token ID to check"
					},
					"returns": {
						"_0": "True if token is listed and active"
					}
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"purchaseListing(uint256)": {
					"params": {
						"listingId": "ID of the listing to purchase"
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"requestRemainingTickets(uint64,string[])": {
					"params": {
						"args": "Function arguments; args[0] should be the event ID string",
						"subscriptionId": "Your Chainlink Functions subscription ID"
					},
					"returns": {
						"requestId": "The ID of the request sent"
					}
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setFeeRecipient(address)": {
					"params": {
						"newFeeRecipient": "New fee recipient address"
					}
				},
				"setListingDurationLimits(uint256,uint256)": {
					"params": {
						"newMaxDuration": "New maximum listing duration",
						"newMinDuration": "New minimum listing duration"
					}
				},
				"setPlatformFee(uint256)": {
					"params": {
						"newFeePercent": "New fee percentage in basis points"
					}
				},
				"setSubscriptionId(uint64)": {
					"params": {
						"newSubscriptionId": "New subscription ID"
					}
				},
				"setSupportedContract(address,bool)": {
					"params": {
						"nftContract": "Address of the NFT contract",
						"supported": "Whether the contract is supported"
					}
				},
				"setTicketStatus(string,uint8)": {
					"params": {
						"status": "New status to set",
						"ticketId": "Ticket ID to update"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"upgradeToAndCall(address,bytes)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"verifyTicketUsage(uint64,string)": {
					"params": {
						"subscriptionId": "Your Chainlink Functions subscription ID",
						"ticketId": "The ID of the ticket to verify"
					},
					"returns": {
						"requestId": "The ID of the request sent"
					}
				}
			},
			"title": "SecondaryMarket",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Response(bytes32,uint256,bytes,bytes)": {
					"notice": "Emitted when a Chainlink Functions request is fulfilled for availability check"
				},
				"TicketVerified(bytes32,string,bool,bytes,bytes)": {
					"notice": "Emitted when a ticket usage status is verified"
				}
			},
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "允许接收者完成所有权转移"
				},
				"cancelListing(uint256)": {
					"notice": "Cancels an active listing"
				},
				"createListing(address,uint256,uint256,uint256,string)": {
					"notice": "Creates a new NFT listing with event time verification"
				},
				"emergencyCancelListing(uint256)": {
					"notice": "Emergency function to cancel any listing (admin only)"
				},
				"feeRecipient()": {
					"notice": "Platform fee recipient"
				},
				"getCurrentListingId()": {
					"notice": "Gets the current listing count"
				},
				"getImplementation()": {
					"notice": "Returns the current implementation contract address."
				},
				"getListing(uint256)": {
					"notice": "Gets listing details by ID"
				},
				"getListingTicketStatus(uint256)": {
					"notice": "Gets ticket status for a listing"
				},
				"handleOracleFulfillment(bytes32,bytes,bytes)": {
					"notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
				},
				"initialize(address,uint256,uint256,uint256,address,uint64)": {
					"notice": "Initializes the Market contract"
				},
				"isTicketUsed(string)": {
					"notice": "Check if a ticket has been used (returns cached result)"
				},
				"isTokenListed(address,uint256)": {
					"notice": "Checks if a token is currently listed"
				},
				"listingToTicketId(uint256)": {
					"notice": "Mapping from listing ID to ticket ID"
				},
				"listings(uint256)": {
					"notice": "Mapping from listing ID to listing details"
				},
				"maxListingDuration()": {
					"notice": "Maximum listing duration in seconds"
				},
				"minListingDuration()": {
					"notice": "Minimum listing duration in seconds"
				},
				"owner()": {
					"notice": "获取当前所有者"
				},
				"pause()": {
					"notice": "Pauses the contract"
				},
				"platformFeePercent()": {
					"notice": "Platform fee percentage (basis points, e.g., 250 = 2.5%)"
				},
				"purchaseListing(uint256)": {
					"notice": "Purchases an NFT from a listing"
				},
				"remainingTickets()": {
					"notice": "Latest number of remaining tickets fetched from the API"
				},
				"requestRemainingTickets(uint64,string[])": {
					"notice": "Sends a Chainlink Functions request to fetch remaining ticket count"
				},
				"requestToListing(bytes32)": {
					"notice": "Mapping from request ID to listing ID"
				},
				"s_lastCheckedTicketId()": {
					"notice": "Last ticket ID that was checked"
				},
				"s_lastTicketUsed()": {
					"notice": "Last ticket usage status"
				},
				"setFeeRecipient(address)": {
					"notice": "Updates the fee recipient address"
				},
				"setListingDurationLimits(uint256,uint256)": {
					"notice": "Updates listing duration limits"
				},
				"setPlatformFee(uint256)": {
					"notice": "Updates the platform fee percentage"
				},
				"setSubscriptionId(uint64)": {
					"notice": "Updates the Chainlink Functions subscription ID"
				},
				"setSupportedContract(address,bool)": {
					"notice": "Updates support status for an NFT contract"
				},
				"setTicketStatus(string,uint8)": {
					"notice": "Manually set ticket status (admin only)"
				},
				"subscriptionId()": {
					"notice": "Chainlink Functions subscription ID for ticket verification"
				},
				"supportedContracts(address)": {
					"notice": "Mapping to track if an NFT contract is supported"
				},
				"ticketStatus(string)": {
					"notice": "Mapping from ticket ID to ticket status"
				},
				"ticketUsageStatus(string)": {
					"notice": "Mapping to store ticket usage status (ticketId => isUsed)"
				},
				"tokenToListing(address,uint256)": {
					"notice": "Mapping from NFT contract + token ID to listing ID"
				},
				"transferOwnership(address)": {
					"notice": "允许所有者开始将所有权转移到新地址"
				},
				"unpause()": {
					"notice": "Unpauses the contract"
				},
				"verifyTicketUsage(uint64,string)": {
					"notice": "Sends a Chainlink Functions request to verify if a ticket has been used"
				}
			},
			"notice": "NFT marketplace contract supporting ERC721A tokens with ticket verification",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"smartContract/contracts/secondaryMarket/SecondaryMarket.sol": "SecondaryMarket"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol": {
			"keccak256": "0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d1dabc1ca292b93c373589b1827f01b404d0d66669f58c03b6d2f92a6e64f2c",
				"dweb:/ipfs/QmP3yzaUfqUqb7qk4fBYw8U6rMgWsSgNKjSUGJncjwaHCq"
			]
		},
		"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol": {
			"keccak256": "0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e0828ef423afef9f6f709bb173a7e3991fe555bf9337a4941d65da525ac4ad3",
				"dweb:/ipfs/QmXz1jHRZFTqdnNxP2tffVQ9NnUE1xgtBMRWuyUrTVY4pm"
			]
		},
		"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol": {
			"keccak256": "0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4c3228edc2cff7c55301d3764e54cd7ada6af81ef9aadf8bc116a2c982523d6",
				"dweb:/ipfs/QmXjJQgCu2gvX6QQJ9GC1gEoy3vrmpf1PiRPLqWqKddwRe"
			]
		},
		"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol": {
			"keccak256": "0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea7c96e993b253723ed5461008c34b847d7b067221736068d45f029db4d92b0d",
				"dweb:/ipfs/QmTMMXAWXeDgSChnToydej6e3p331KiJZT3S27ZiPkht9t"
			]
		},
		"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol": {
			"keccak256": "0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b",
			"license": "MIT",
			"urls": [
				"bzz-raw://eeeaeadc797b7656fd30201ab8c8ed24fe8fb3f83a480142bb55c7c7babb2b4b",
				"dweb:/ipfs/Qmdb55a1iWJetog7qUpZ6FHKGSA8g3Vu68LGsXfqfec9k5"
			]
		},
		"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol": {
			"keccak256": "0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0",
			"license": "BSD-2-Clause",
			"urls": [
				"bzz-raw://2c65ceaef4ce70e8638275da75f4c384d4e404d588fcac404028da7e634c81a8",
				"dweb:/ipfs/QmV3vMmjseNombFaRGw7K4PgDj6rrWcEzNY9S5jtLAdJqG"
			]
		},
		"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol": {
			"keccak256": "0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715",
			"license": "MIT",
			"urls": [
				"bzz-raw://39c9937cf45f840cf3a45a83dec3719dbd2f1d71198088db48b909ec656f77dd",
				"dweb:/ipfs/QmQx9mEREaFyJGC2KpqWBqBV712NY8vUBrcqTR4RdVNBiu"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
			"keccak256": "0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534",
			"license": "MIT",
			"urls": [
				"bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da",
				"dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
				"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bc189f63b639ee173dd7b6fecc39baf7113bf161776aea22b34c57fdd1872ec",
				"dweb:/ipfs/QmZAf2VtjDLRULqjJkde6LNsxAg12tUqpPqgUQQZbAjgtZ"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
			"keccak256": "0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4",
			"license": "MIT",
			"urls": [
				"bzz-raw://68a514febde6ffd8afe3cb5b40815d10c0a926063237d5d167cbaa90239f75ae",
				"dweb:/ipfs/QmVBvYeR6oGBw7K7vu5FMotr8josejtaGwugM68VTZacww"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
			"keccak256": "0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c353ee3705bbf6fadb84c0fb10ef1b736e8ca3ca1867814349d1487ed207beb",
				"dweb:/ipfs/QmcugaPssrzGGE8q4YZKm2ZhnD3kCijjcgdWWg76nWt3FY"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866",
			"license": "MIT",
			"urls": [
				"bzz-raw://19ae787a7dd001269cd60a394b1a5261b78925a0fc3a6f927beb2986a9aa56cf",
				"dweb:/ipfs/QmYLfXiuKmcRgTDBEDXMMjXU8t6JxsspUmjxYzqWS55oEv"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89",
				"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
			"license": "MIT",
			"urls": [
				"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
				"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1967.sol": {
			"keccak256": "0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486",
			"license": "MIT",
			"urls": [
				"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d",
				"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d3b36282ab029b46bd082619a308a2ea11c309967b9425b7b7a6eb0b0c1c3196",
				"dweb:/ipfs/QmP2YVfDB2FoREax3vJu7QhDnyYRMw52WPrCD4vdT2kuDA"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
			"keccak256": "0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898",
			"license": "MIT",
			"urls": [
				"bzz-raw://271f914261a19d87117a777e0924ada545c16191ef9b00cc40b0134fc14ebc70",
				"dweb:/ipfs/QmdvVNWHGHQrGGPonZJs5NuzTevTjZRM2zayKrDJf7WBA2"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa",
				"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb2f27cd3952aa667e198fba0d9b7bcec52fbb12c16f013c25fe6fb52b29cc0e",
				"dweb:/ipfs/QmeuohBFoeyDPZA9JNCTEDz3VBfBD4EABWuWXVhHAuEpKR"
			]
		},
		"@openzeppelin/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"@openzeppelin/contracts/utils/Errors.sol": {
			"keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
				"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"erc721a-upgradeable/contracts/ERC721AStorage.sol": {
			"keccak256": "0x682166ae85d0e8e16775b7ea10b45873df0158206de5036a68a155f9a6dd8207",
			"license": "MIT",
			"urls": [
				"bzz-raw://89ec6136788b7e4467f596318b32163eb032ca8af71c1aec8c8237797bcf6712",
				"dweb:/ipfs/QmV9Z3Era3u98RxiaEfzDE2kFSPrdXa3hWvXnvqCY6CrrQ"
			]
		},
		"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol": {
			"keccak256": "0x1fa5506f629732d362af3a913e0c941aad69e268c852d570eae4ceedd99ab84a",
			"license": "MIT",
			"urls": [
				"bzz-raw://27e563eb9cf5db569d35e3905ca3c930d51da2415ad18313a158f24d6923bb27",
				"dweb:/ipfs/QmSwBLS3XGCjtkakad78p1yBdwoBkaYoJD13ZAMr9j59xD"
			]
		},
		"erc721a-upgradeable/contracts/ERC721A__Initializable.sol": {
			"keccak256": "0x4a78c3bccd097e704d6c37cf90af892eae0e3fcb13dcc37e5c1ad6c36f4240f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://1b2d1b219b5d96c2224b6badd91845100ee099adfb569dd898d8f305ba247c07",
				"dweb:/ipfs/QmRVNixh5LtNTDdq9aJT3kqPfZjrMmb6CC26fEuUfF61kc"
			]
		},
		"erc721a-upgradeable/contracts/ERC721A__InitializableStorage.sol": {
			"keccak256": "0x361a8f273736b37718a98049c3f210381c41e4241ff24a36360e417b94ad87b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://b50cfd64069938167050defd8e6640ecff6a1687ae79f7b6ffb021f3f65b60f2",
				"dweb:/ipfs/QmZa4ynQofKGCxWvM7QdVcZx3MkY3XAPeKjd65v4QvvxXK"
			]
		},
		"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol": {
			"keccak256": "0xaeabed185f4b889c097e61ef486a003e64cdc2d048b569ebcd315ff52a63367b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1467c43374b40d0965b14270cf134a96e806816b4447963f6a9c4106c5892eaf",
				"dweb:/ipfs/QmYqrqLB1fmMb888r8EEB2AMkMkWDn7hmKw7TvLX9fb2y7"
			]
		},
		"erc721a-upgradeable/contracts/extensions/ERC721ABurnableUpgradeable.sol": {
			"keccak256": "0xc80bdb19de71626f00ea33b2e918ddc8914196be9f9771a504909ad6a82e885f",
			"license": "MIT",
			"urls": [
				"bzz-raw://83a4ca77778845e1cd83dff068262efa355d67864db32a99fd2b2d42bf8f37ba",
				"dweb:/ipfs/Qmb2phenhZHwub12ij4xjzsJQZH28u3r1wQXzHjkT8Q4Xc"
			]
		},
		"erc721a-upgradeable/contracts/extensions/IERC721ABurnableUpgradeable.sol": {
			"keccak256": "0xae7d3e3ed1a14c6700fa002b9ba385a82831d38ed682c8b7dcd7e764ee0d69a2",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ada5b1f2fe9ad27c46b990ab4801a0a32d0bd1ecf38e47afa1da63c534d86ed",
				"dweb:/ipfs/QmPDvbMRWi7wK3sLi9ZVq5gJcQmA9YumSdwiSdmf7j3Jay"
			]
		},
		"smartContract/contracts/chainlink/ConfirmedOwnerUpgradeable.sol": {
			"keccak256": "0xa1cbb0d8a151a233bbad57e75daa2353f7854fe2b86e28efdecf35db131486f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://eae5fed218f991f5b59d12b3c8e9fdb7b05c03bcbbd769865597739ff2a297e1",
				"dweb:/ipfs/QmWfGD3rz3JSTBpZ6hDHNsk7h2CeDH2StNe2QFFDyjRvcY"
			]
		},
		"smartContract/contracts/chainlink/FunctionsClientUpgradeable.sol": {
			"keccak256": "0x9f250d96c12fbcb1b7d9a2cf97abd485120d7e395bdd6ed831ea6bd76ae0a4cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://e1167b7ac5526f0503280fffac21b0adad2739a245ea8175d5f0fe44d69fa709",
				"dweb:/ipfs/QmZNfMaCwCJxAhoW4MrgoGw1Kvj3SwtphtyJ1tX9SyHhob"
			]
		},
		"smartContract/contracts/errors/Errors.sol": {
			"keccak256": "0xfb2e9319a6ad186c4f0d7d209602b2009fb66c19fc9624e5bce722506e234394",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://95b4ec78f00505a096e4da0914f39bbb0b78a62915f98ffc98cb2bad83752b30",
				"dweb:/ipfs/QmcrSzTwJUBHpB6xhBtjenV11nxvafrwStUzaAiSUU1fbA"
			]
		},
		"smartContract/contracts/proxy/UUPSAccessControl.sol": {
			"keccak256": "0xf1026080419b66de723dda208eb8759ae628f9004253f62e6be38644fab76cf3",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://097c93b2b8bd22d34dd0d1b47ca2c5107020026244e06cd3d2af808cf7a52373",
				"dweb:/ipfs/Qmbqk7tXNZUZ55y9u9yzzaL7puXuuaxehusVsUWzg5xqKw"
			]
		},
		"smartContract/contracts/secondaryMarket/SecondaryMarket.sol": {
			"keccak256": "0x890ffb31e5adbf045d6db76cf76f31cb99c0128e86d9d6435be55149d7cac832",
			"license": "MIT",
			"urls": [
				"bzz-raw://bce2957edbcc311ddd5109787f3f67ae0c7f0b194568c021a39bb8f858c7a2c3",
				"dweb:/ipfs/QmWs87SgeyTR5T5B4FnZs8QexKHxMGBpooKhYAoLrcfrRP"
			]
		},
		"smartContract/contracts/ticketInfo/TicketInfoConsumer.sol": {
			"keccak256": "0x9fda64032967b0d458f1b84394c07c6769c8514f393aeeba720f05fddd124d92",
			"license": "MIT",
			"urls": [
				"bzz-raw://6b16054b8a8517feb58cefa934939d00ffadabb9117a6915a3c75b4b0689fc26",
				"dweb:/ipfs/QmUEa2RYoKtsjexQmE53CgSvjZr9Kkg2YozcDGfszXmCNt"
			]
		},
		"smartContract/contracts/tickets/Ticket.sol": {
			"keccak256": "0x7e8549d12ff7a86a9b02e77e66b8259cae864952f6876cb25e1b4cb8ee48b9ab",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://27523499b6855db72f73c7d8176ee2b1b7c8ae6563f3ecd6e4d132fcc01426e4",
				"dweb:/ipfs/QmWnQWkji6wtxxcVRUWCUPw3znugbJzbUjJyk7vzWw7Mwe"
			]
		},
		"smartContract/contracts/types/EventDetails.sol": {
			"keccak256": "0xa87ebb3b07a35a016ffcc7506dbcf042967e3c2c9f77e34c29916bb3ef38e9da",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://3999484656f4d8b83e385caa1c367f925f819424f4fbad9dab64e111f3de1385",
				"dweb:/ipfs/QmU2QtcEjVvu36SbqpM1mvtfoxCZa2ZWYybGrGBnFGftxD"
			]
		},
		"smartContract/contracts/types/Seat.sol": {
			"keccak256": "0xbbd0095114b66f0be058fdc406b937aa9b3ddf03fe7e649cc7ad21d25efd8867",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://2395157e8847b35305d2c0f359c6737dfb0c93ad2d31aec21675ab2a8daee1a0",
				"dweb:/ipfs/QmP6XjHFbEhBT7bD9hko4TJ5APQo3HDHxuGmLQno2Jcuxv"
			]
		},
		"smartContract/contracts/types/TierInfo.sol": {
			"keccak256": "0xeb898321d3822f147beb5ff6b7a65d669fdedb8341f3e7d746526d7c6aeb4c5f",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b2054681fd5c8174205e2e8bac46bc00490fdbdff2363d3c2c0586a8dc4ed003",
				"dweb:/ipfs/QmcZHzhneq63Gr6jZ1zNFHmeVdjUmkCJ4FvWp2SHwwiVoz"
			]
		}
	},
	"version": 1
}